script 흐름 순서 

1. document.addEventListener('DOMContentLoaded', init);  

DOMContentLoaded >> DOM요소에 모든 컨텐츠들이 로딩되면 init함수 실행 
init 함수에는 bindEvents(), render()가 차례로 실행되는데 
bindEvents로 있어야 할 이벤트들을 모두 활성화시키는 느낌 
render는 화면에 표시하는 렌더링, 사용자 환경에 맞는 요소들로 출력되도록 설정 

updateActiveButton(); 함수는 토글 함수인데 이름을 짓다보니 이렇게 된 느낌. 매개변수 사용을 고려해볼걸 그랬다. selectTypeIncome(), selectTypeExpense()를 사용해 currentType(입력 시 수입인지 지출인지 고르는 상태)에 변경을 준다.

2. 렌더링
기존 내역 목록을 비도록 만들고, 변경점이 있다면 덮어쓴 내용을 적용하기 위해 기존 요소를 없애는 느낌
CurrentType을 설정한 상태로 유지시켜놓고 (토글)
필터링(전체,수입,지출) 과정을 통해 해당하는 요소만 볼 수 있도록 필터된 목록을 구성시키도록 한다.

비어있다면 emptyStateRender를 통해 빈 화면에 알맞는 요소를 createElement를 통해 만들어서 빈 화면이 심심하지 않도록 만들어준다. -> 전역 DOM요소로 빠져있는 이유는 전체/수입/지출 필터링에 맞는 빈 화면을 출력하기 위해 빼놓았었다가 어떻게 시도할지 고민중이라 모두 구현을 하지 못한 상태로 유지가 된 것

목록이 비어있지 않다면 forEach를 통해 필터 된 목록 요소 하나씩 accItemRender를 통해 미리 구상해둔 HTML로 넣기위한 작업(?알고리즘?)을 수행하도록 한다. 물론, 새로 추가된 삭제버튼(delete-btn)에 새로운 이벤트가 필요하니까 addEventListener를 추가해 삭제 버튼의 이벤트를 추가한다.

마지막 렌더링으론 updateBoard();을 통해 총 수입, 총 지출, 잔액을 표시하는 board를 통해 각각의 액수를 볼 수 있도록 한다. 보드를 계산하면서 나오는 extra(잔액)은 header에 현재 잔액과도 동일하기 때문에 setCurrentCost함수로 헤더 영역에 표시할 수 있도록 한다.

3. JSON >> localStorage 저장 
전역 변수 중 accList = JSON.parse(localStorage.getItem('accList'))||[]; 으로 로컬 저장소에서 목록을 불러오거나 비어있다면 빈 목록을 지정 해서 가져올 수 있다.
데이터 조작 함수들 중 render()함수 실행 전 saveAccount() 함수를 이용해서 
'accList' : JSON.stringify(accList) 형태로 k-v형태로 로컬저장소에 보관하도록 할 수 있다.





