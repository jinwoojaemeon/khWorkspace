package com.jdbc.lifegame.common;

import com.jdbc.lifegame.model.vo.LifeCharacter;
import com.jdbc.lifegame.controller.StockController;

public class UiTemplate {
    // 기본 구분선
    public static void line() {
        System.out.println("=====================================================================");
    }

    // 메뉴 헤더 출력 (메뉴명 + 캐릭터 기본정보)
    public static void menuHeader(String menuName, LifeCharacter life) {
        line();
        System.out.printf("%-30s | %s%n", menuName, basicStat(life));
        System.out.println(abilityStat(life));
        line();
    }

    // 캐릭터 기본 정보 (이름, 나이)
    public static String basicStat(LifeCharacter life) {
        return "이름: " + life.getCharacterName() + " | 나이: " + life.getAge() + "세";
    }

    // 능력치 정보 (지능, 체력, 운, 자본)
    public static String abilityStat(LifeCharacter life) {
        return String.format("지능: %d 체력: %d 운: %d 자본: %s",
            life.getIntelligence(), life.getStamina(), life.getLuck(), 
            formatMoney(life.getMoney()));
    }

    // 직업 경력 정보 (간단버전 - 주요 경력만)
    public static String experienceStat(LifeCharacter life) {
        return String.format("알바 경력: %d년 회사 경력: %d년 노가다 경력: %d년",
            life.getPartTimeExp(), life.getEmployeeExp(), life.getLaborerExp());
    }

    // 전체 경력 정보 (상세버전 - 모든 경력)
    public static String fullExperienceStat(LifeCharacter life) {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("알바 경력: %d년 회사 경력: %d년 노가다 경력: %d년%n",
            life.getPartTimeExp(), life.getEmployeeExp(), life.getLaborerExp()));
        sb.append(String.format("임원 경력: %d년 창업 경력: %d년 책임자 경력: %d년%n",
            life.getExecutiveExp(), life.getEntrepreneurExp(), life.getSupervisorExp()));
        sb.append(String.format("트레이너 경력: %d년 운동선수 경력: %d년",
            life.getTrainerExp(), life.getAthleteExp()));
        return sb.toString();
    }

    // 투자 현황 정보 (실시간 주식 가격으로 계산)
    public static String investmentStat(LifeCharacter life) {
        // 실시간 주식 가격 가져오기
        StockController stc = new StockController();
        int currentStockPrice = stc.getCurrentStockPrice(life.getcharacterId());
        int totalStockValue = life.getStockCount() * currentStockPrice;
        
        return String.format("아파트: %s 빌딩: %s 호텔: %s | 주식: %d주 (가치: %s)",
            life.isHasApartment() ? "보유" : "미보유",
            life.isHasBuilding() ? "보유" : "미보유",
            life.isHasHotel() ? "보유" : "미보유",
            life.getStockCount(),
            formatMoney(totalStockValue));
    }

    public static String calculateJobIncome(String jobName, int baseIncome, int experience, int bonus) {
        int totalIncome = baseIncome + (experience * bonus);
        return String.format("수입: %s (기본 %s + 경력 %d×%d)", 
            formatMoney(totalIncome), formatMoney(baseIncome), experience, bonus);
    }
    
    public static String formatMoney(int money) {
        if (money >= 10000) {
            int eok = money / 10000;  
            int remain = money % 10000;  
            
            if (remain == 0) {
                return eok + "억";
            } else {
                return String.format("%d억 %d만원", eok, remain);
            }
        } else {
            return String.format("%d만원", money);
        }
    }
   
}